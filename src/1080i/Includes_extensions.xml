<?xml version="1.0" encoding="UTF-8"?>
<includes>

	<!--
		Label control - Input parameters:
			posx	- Specifies where the left edge of the control should be drawn
			posy	- Specifies where the top edge of the control should be drawn
			width	- Specifies the width that should be used to draw the control
			font	- Specifies the font to use from the font.xml file
			label	- Specifies the text which should be drawn
			color	- Specified the color scheme  of the text
			wrap	- Indicates multi-line display
			alignx  - Indicates the horizontal alignment
			aligny  - Indicates the vertical alignment
	-->
	<include name="Label">
		<param name="description"/>
		<param name="id"/>
		<param name="posx"/>
		<param name="posy"/>
		<param name="width"/>
		<param name="label"/>
		<param name="font" default="itemTitle"/>
		<param name="color" default="selected"/>
		<param name="wrap" default="false"/>
		<param name="alignx" default="left"/>
		<param name="aligny" default="top"/>
		<definition>
			<control type="label" id="$PARAM[id]1">
				<description>$PARAM[description]</description>
				<posx>$PARAM[posx]</posx>
				<posy>$PARAM[posy]</posy>
				<width>$PARAM[width]</width>
				<font>$PARAM[font]</font>
				<textcolor>$PARAM[color]</textcolor>
				<textoffsetx>5</textoffsetx>
				<shadowcolor>-</shadowcolor>
				<label>$PARAM[label]</label>
				<align>$PARAM[alignx]</align>
				<aligny>$PARAM[aligny]</aligny>
				<wrapmultiline>$PARAM[wrap]</wrapmultiline>
			</control>
		 </definition>
	</include>


	<!--
		Editbox control - Input parameters:
			id		- Specifies the control ID of the edit box.
			posx	- Specifies where the left edge of the control should be drawn
			posy	- Specifies where the top edge of the control should be drawn
			lwidth	- Specifies the width that should be used to draw the label
			bwidth	- Specifies the width that should be used to draw the edit box control
			label	- Specifies the text label which should be drawn as control label
			hint	- Specifies the text value which should be displayed as default label within the control
			balign	- Aligns the text within the given edit box control
			up		- Specifies the <id> of the control that should be moved to when the user moves up off this control
			down	- Specifies the <id> of the control that should be moved to when the user moves down off this control
			left	- Specifies the <id> of the control that should be moved to when the user moves left off this control
			right	- Specifies the <id> of the control that should be moved to when the user moves right off this control
	-->
	<include name="Editbox">
		<param name="description"/>
		<param name="id"/>
		<param name="posx"/>
		<param name="posy"/>
		<param name="lwidth"/>
		<param name="bwidth"/>
		<param name="balign"/>
		<param name="label"/>
		<param name="hint"/>
		<param name="up"/>
		<param name="down"/>
		<param name="left"/>
		<param name="right"/>
		<definition>
			<control type="group">
				<description>$PARAM[description]</description>
				<posx>$PARAM[posx]</posx>
				<posy>$PARAM[posy]</posy>
				<control type="label" id="$PARAM[id]1">
					<enable>Control.HasFocus($PARAM[id])</enable>
					<posx>0</posx>
					<posy>0</posy>
					<width>$PARAM[lwidth]</width>
					<font>itemTitle</font>
					<textcolor>selected</textcolor>
					<textoffsetx>5</textoffsetx>
					<shadowcolor>-</shadowcolor>
					<label>$PARAM[label]</label>
				</control>
				<control type="group">
					<posx>$PARAM[lwidth]</posx>
					<control type="image">
						<posx>0</posx>
						<posy>0</posy>
						<width>$PARAM[bwidth]</width>
						<height>1-row</height>
						<texture border="3" flipy="true" flipx="false">masks/offblack.png</texture>
						<bordertexture border="3" colordiffuse="77FFFFFF">controls/square-fo.png</bordertexture>
						<bordersize>3</bordersize>
					</control>
					<control type="edit" id="$PARAM[id]">
						<posx>0</posx>
						<posy>0</posy>
						<width>$PARAM[bwidth]</width>
						<font>itemTitle</font>
						<textoffsetx>12</textoffsetx>
						<textoffsety>0</textoffsety>
						<align>$PARAM[balign]</align>
						<aligny>center</aligny>
						<textcolor>black</textcolor>
						<focusedcolor>black</focusedcolor>
						<shadowcolor>-</shadowcolor>
						<texturenofocus colordiffuse="77FFFFFF">masks/selected.png</texturenofocus>
						<texturefocus colordiffuse="77FFFFFF">controls/square-fo.png</texturefocus>
						<pulseonselect>true</pulseonselect>
						<hinttext>$PARAM[hint]</hinttext>
						<onup>$PARAM[up]</onup>
						<ondown>$PARAM[down]</ondown>
						<onleft>$PARAM[left]</onleft>
						<onright>$PARAM[right]</onright>
					</control>
				</control>
			</control>
		</definition>
	</include>


	<!--
		Button control - Input parameters:
			id		- Specifies the control ID of the edit box.
			posx	- Specifies where the left edge of the control should be drawn
			posy	- Specifies where the top edge of the control should be drawn
			width	- Specifies the width that should be used to draw the button control
			label	- Specifies the text which should be drawn as control label
			up		- Specifies the <id> of the control that should be moved to when the user moves up off this control
			down	- Specifies the <id> of the control that should be moved to when the user moves down off this control
			left	- Specifies the <id> of the control that should be moved to when the user moves left off this control
			right	- Specifies the <id> of the control that should be moved to when the user moves right off this control
			action	- Specifies the control action for onClick event. It is attached only when the parameter is not empty.
	-->
	<include name="Button">
		<param name="description"/>
		<param name="id"/>
		<param name="posx"/>
		<param name="posy"/>
		<param name="width"/>
		<param name="label"/>
		<param name="up"/>
		<param name="down"/>
		<param name="left"/>
		<param name="right"/>
		<definition>
			<control type="group">
				<description>$PARAM[description]</description>
				<posx>$PARAM[posx]</posx>
				<posy>$PARAM[posy]</posy>
				<control type="button" id="$PARAM[id]">
					<posx>0</posx>
					<posy>0</posy>
					<width>$PARAM[width]</width>
					<font>itemTitle</font>
					<textoffsetx>12</textoffsetx>
					<textoffsety>0</textoffsety>
					<align>center</align>
					<aligny>center</aligny>
					<textcolor>selected</textcolor>
					<focusedcolor>selected</focusedcolor>
					<shadowcolor>-</shadowcolor>
					<texturenofocus colordiffuse="77FFFFFF">masks/selected.png</texturenofocus>
					<texturefocus colordiffuse="77FFFFFF">controls/square-fo.png</texturefocus>
					<pulseonselect>true</pulseonselect>
					<label>$PARAM[label]</label>
					<onup>$PARAM[up]</onup>
					<ondown>$PARAM[down]</ondown>
					<onleft>$PARAM[left]</onleft>
					<onright>$PARAM[right]</onright>
					<onclick condition="!String.IsEmpty($PARAM[action])">$PARAM[action]</onclick>
				</control>
			</control>
		</definition>
	</include>


	<!--
		Checkbox control - Input parameters:
			id		- Specifies the control ID of the edit box.
			posx	- Specifies where the left edge of the control should be drawn
			posy	- Specifies where the top edge of the control should be drawn
			width	- Specifies the width that should be used to draw the button control
			label	- Specifies the text which should be drawn as control label
			up		- Specifies the <id> of the control that should be moved to when the user moves up off this control
			down	- Specifies the <id> of the control that should be moved to when the user moves down off this control
			left	- Specifies the <id> of the control that should be moved to when the user moves left off this control
			right	- Specifies the <id> of the control that should be moved to when the user moves right off this control
	-->
	<include name="Radiobutton">
		<param name="description"/>
		<param name="id"/>
		<param name="posx"/>
		<param name="posy"/>
		<param name="width"/>
		<param name="label"/>
		<param name="up"/>
		<param name="down"/>
		<param name="left"/>
		<param name="right"/>
		<definition>
			<control type="group">
				<description>$PARAM[description]</description>
				<posx>$PARAM[posx]</posx>
				<posy>$PARAM[posy]</posy>
				<control type="radiobutton" id="$PARAM[id]">
					<posx>0</posx>
					<posy>0</posy>
					<width>$PARAM[width]</width>
					<textcolor>disabled</textcolor>
					<focusedcolor>selected</focusedcolor>
					<texturefocus colordiffuse="77FFFFFF">masks/selected.png</texturefocus>
					<pulseonselect>true</pulseonselect>
					<textoffsetx>5</textoffsetx>
					<label>$PARAM[label]</label>
					<onup>$PARAM[up]</onup>
					<ondown>$PARAM[down]</ondown>
					<onleft>$PARAM[left]</onleft>
					<onright>$PARAM[right]</onright>
				</control>
			</control>
		</definition>
	</include>


	<!--
		Listbox control - Input parameters:
			id		- Specifies the control ID of the list box.
			posx	- Specifies where the left edge of the control should be drawn
			posy	- Specifies where the top edge of the control should be drawn
			width	- Specifies the width that should be used to draw the list box control
			height	- Specifies the height that should be used to draw the list box control
			up		- Specifies the <id> of the control that should be moved to when the user moves up off this control
			down	- Specifies the <id> of the control that should be moved to when the user moves down off this control
			left	- Specifies the <id> of the control that should be moved to when the user moves left off this control
			right	- Specifies the <id> of the control that should be moved to when the user moves right off this control
	-->
	<include name="Listbox">
		<param name="description"/>
		<param name="id"/>
		<param name="posx"/>
		<param name="posy"/>
		<param name="width"/>
		<param name="height"/>
		<param name="label"/>
		<param name="up"/>
		<param name="down"/>
		<param name="left"/>
		<param name="right"/>
		<param name="orientation" default="vertical"/>
		<definition>
			<control type="group">
				<description>$PARAM[description]</description>
				<posx>$PARAM[posx]</posx>
				<posy>$PARAM[posy]</posy>
				<control type="image">
					<posx>0</posx>
					<posy>0</posy>
					<width>$PARAM[width]</width>
					<height>$PARAM[height]</height>
					<texture border="3" flipy="true" flipx="false">masks/inactive.png</texture>
					<bordertexture border="3" colordiffuse="77FFFFFF">controls/square-fo.png</bordertexture>
					<bordersize>3</bordersize>
				</control>
				<control type="list" id="$PARAM[id]">
					<posx>0</posx>
					<posy>0</posy>
					<width>$PARAM[width]</width>
					<height>$PARAM[height]</height>
					<onup>$PARAM[up]</onup>
					<ondown>$PARAM[down]</ondown>
					<onleft>$PARAM[left]</onleft>
					<onright>$PARAM[right]</onright>
					<pagecontrol>-</pagecontrol>
					<itemgap>3</itemgap>
					<orientation>$PARAM[orientation]</orientation>
					<itemlayout height="1-row" width="$PARAM[width]">
						<control type="label">
							<posx>0</posx>
							<posy>0</posy>
							<width>$PARAM[width]</width>
							<font>smallMedium</font>
							<textcolor>unselected</textcolor>
							<label>$INFO[ListItem.label]</label>
							<shadowcolor>-</shadowcolor>
							<textoffsetx>10</textoffsetx>
							<scroll>false</scroll>
							<aligny>center</aligny>
						</control>
					</itemlayout>
					<focusedlayout height="1-row" width="$PARAM[width]">
						<control type="image">
							<visible>Control.HasFocus($PARAM[id])</visible>
							<posx>0</posx>
							<posy>1</posy>
							<width>$PARAM[width]</width>
							<height>56</height>
							<aspectratio>stretch</aspectratio>
							<texture>masks/selected.png</texture>
						</control>
						<control type="label">
							<posx>0</posx>
							<posy>0</posy>
							<width>$PARAM[width]</width>
							<font>smallMedium</font>
							<textcolor>selected</textcolor>
							<label>$INFO[ListItem.label]</label>
							<shadowcolor>-</shadowcolor>
							<textoffsetx>10</textoffsetx>
							<scroll>false</scroll>
							<aligny>center</aligny>
						</control>
					</focusedlayout>
				</control>
			</control>
		</definition>
	</include>


	<!-- Conditional parameter to labeling different control in order to have a customizable label-->
	<include name="LabelParam">
		<label>$PARAM[label]</label>
	</include>


	<!--
		PropertyLabel control - Provides capability to display dynamic data/content through the window property.
		Input parameters:
			posx	- Specifies where the left edge of the control should be drawn
			posy	- Specifies where the top edge of the control should be drawn
			width	- Specifies the width that should be used to draw the control
			font	- Specifies the font to use from the font.xml file
			color	- Specified the color scheme  of the text
		Input properties:
			Visible.[id] - Makes the control to be visible or hidden. The possible values are True or Empty and False
			Enable.[id]  - Activates and de-activates the control. The possible values are True or Empty and False
			Label.[id]   - describes the control label
	-->
	<include name="PropertyLabel">
		<param name="description"/>
		<param name="id"/>
		<param name="posx"/>
		<param name="posy"/>
		<param name="width"/>
		<param name="label" default=""/>
		<param name="font" default="itemTitle"/>
		<param name="color" default="unselected"/>
		<definition>
			<control type="label" id="$PARAM[id]">
				<description>$PARAM[description]</description>
				<visible>String.IsEmpty(Window.Property(Visible.$PARAM[id]))|String.IsEqual(Window.Property(Visible.$PARAM[id]),true)</visible>
				<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
				<posx>$PARAM[posx]</posx>
				<posy>$PARAM[posy]</posy>
				<width>$PARAM[width]</width>
				<font>$PARAM[font]</font>
				<textcolor>$PARAM[color]</textcolor>
				<textoffsetx>5</textoffsetx>
				<shadowcolor>-</shadowcolor>
				<label fallback="$PARAM[label]">$INFO[Window.Property(Label.$PARAM[id])]</label>
			</control>
		</definition>
	</include>


	<!--
		PropertyEditbox control - Provides capability to collect String data input using Text Dialog box.
		In addition, the control allows dynamic content (like default value, input value) through window parameters.
		Input parameters:
			id		- Specifies the control ID of the edit box.
			posx	- Specifies where the left edge of the control should be drawn
			posy	- Specifies where the top edge of the control should be drawn
			lwidth	- Specifies the width that should be used to draw the label
			bwidth	- Specifies the width that should be used to draw the edit box control
			font	- Specifies the font to use from the font.xml file
			label	- Specifies the text label which should be drawn as control label
			balign	- Aligns the text within the given edit box control
			up		- Specifies the <id> of the control that should be moved to when the user moves up off this control
			down	- Specifies the <id> of the control that should be moved to when the user moves down off this control
			left	- Specifies the <id> of the control that should be moved to when the user moves left off this control
			right	- Specifies the <id> of the control that should be moved to when the user moves right off this control
			title	- Shows a custom label into the KeyboardDialog to set a new value
			dialog  - Indicates the type of dialog that will take the input data; could be: string, number, date, time. ipaddr, select
		Input properties
			Visible.[id] - Makes the control to be visible or hidden. The possible values are True or Empty and False
			Enable.[id]  - Activates and de-activates the control. The possible values are True or Empty and False
			Label.[id]   - describes the control label
			Value.[id]   - describes the default value of the edit control (it should be string format)
			Action.[id]	 - Indicates the action that might be executed in case it is specified after the new value is provided
			Callback.[id]- Specifies if the current control wil trigger Click action immediately after the input value is provided
	-->
	<include name="PropertyEditbox">
		<param name="description"/>
		<param name="id"/>
		<param name="posx"/>
		<param name="posy"/>
		<param name="lwidth"/>
		<param name="bwidth"/>
		<param name="balign"/>
		<param name="label" default=""/>
		<param name="up"/>
		<param name="down"/>
		<param name="left"/>
		<param name="right"/>
		<param name="title"/>
		<param name="dialog" default="string"/>
		<definition>
			<control type="group">
				<description>$PARAM[description]</description>
				<visible>String.IsEmpty(Window.Property(Visible.$PARAM[id]))|String.IsEqual(Window.Property(Visible.$PARAM[id]),true)</visible>
				<posx>$PARAM[posx]</posx>
				<posy>$PARAM[posy]</posy>
				<control type="label">
					<enable>Control.HasFocus($PARAM[id])|Control.HasFocus($PARAM[id]0)</enable>
					<posx>0</posx>
					<posy>0</posy>
					<width>$PARAM[lwidth]</width>
					<font>itemTitle</font>
					<textcolor>selected</textcolor>
					<textoffsetx>5</textoffsetx>
					<shadowcolor>-</shadowcolor>
					<label fallback="$PARAM[label]">$INFO[Window.Property(Label.$PARAM[id])]</label>
				</control>
				<control type="group">
					<posx>$PARAM[lwidth]</posx>
					<control type="image">
						<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
						<posx>0</posx>
						<posy>0</posy>
						<width>$PARAM[bwidth]</width>
						<height>1-row</height>
						<texture border="3" flipy="true" flipx="false">masks/offblack.png</texture>
						<bordertexture border="3" colordiffuse="77FFFFFF">controls/square-fo.png</bordertexture>
						<bordersize>3</bordersize>
					</control>
					<control type="button" id="$PARAM[id]0">
						<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
						<posx>0</posx>
						<posy>0</posy>
						<width>$PARAM[bwidth]</width>
						<font>itemTitle</font>
						<textoffsetx>12</textoffsetx>
						<textoffsety>0</textoffsety>
						<align>$PARAM[balign]</align>
						<aligny>center</aligny>
						<textcolor>black</textcolor>
						<focusedcolor>white</focusedcolor>
						<shadowcolor>-</shadowcolor>
						<texturenofocus colordiffuse="77FFFFFF">masks/selected.png</texturenofocus>
						<texturefocus colordiffuse="77FFFFFF">controls/square-fo.png</texturefocus>
						<pulseonselect>true</pulseonselect>
						<label>$INFO[Window.Property(Value.$PARAM[id])]</label>
						<onup>$PARAM[up]</onup>
						<ondown>$PARAM[down]</ondown>
						<onleft>$PARAM[left]</onleft>
						<onright>$PARAM[right]</onright>
						<onclick condition="!String.IsEmpty(Window.Property(Action.$PARAM[id]))">Window.Property(Action.$PARAM[id])</onclick>
						<onclick condition="String.IsEqual(Window.Property(Callback.$PARAM[id]),on)">RunScript(service.clue,graphic.setproperty,dialog=$PARAM[dialog]&amp;title=$PARAM[title]&amp;data=$INFO[Window.Property(Data.$PARAM[id])]&amp;default=$INFO[Window.Property(Value.$PARAM[id])]&amp;property=Value.$PARAM[id]&amp;callback=SendClick($PARAM[id]))</onclick>
						<onclick condition="!String.IsEqual(Window.Property(Callback.$PARAM[id]),on)">RunScript(service.clue,graphic.setproperty,dialog=$PARAM[dialog]&amp;title=$PARAM[title]&amp;data=$INFO[Window.Property(Data.$PARAM[id])]&amp;default=$INFO[Window.Property(Value.$PARAM[id])]&amp;property=Value.$PARAM[id])</onclick>
					</control>
					<control type="button" id="$PARAM[id]">
						<description>Proxy button</description>
						<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
						<onfocus>SetFocus($PARAM[id]0)</onfocus>
						<posx>0</posx>
						<posy>0</posy>
						<width>1</width>
					</control>
				</control>
			</control>
		</definition>
	</include>


	<!--
		PropertyButton control - Provides capability to display dynamic data/content through the window property.
		The label is always described by property Label.[id] and the button action is Action.[id]. Action property
		is attached to onClick control event only when it isn't empty.
		Input parameters:
			id		- Specifies the control ID of the edit box.
			posx	- Specifies where the left edge of the control should be drawn
			posy	- Specifies where the top edge of the control should be drawn
			width	- Specifies the width that should be used to draw the button control
			up		- Specifies the <id> of the control that should be moved to when the user moves up off this control
			down	- Specifies the <id> of the control that should be moved to when the user moves down off this control
			left	- Specifies the <id> of the control that should be moved to when the user moves left off this control
			right	- Specifies the <id> of the control that should be moved to when the user moves right off this control
		Input properties
			Visible.[id] - Makes the control to be visible or hidden. The possible values are True or Empty and False
			Enable.[id]  - Activates and de-activates the control. The possible values are True or Empty and False
			Label.[id]   - describes the control label. This labbel can be set in Pre-Init phase, before to start window controls loading
	-->
	<include name="PropertyButton">
		<param name="description"/>
		<param name="id"/>
		<param name="posx"/>
		<param name="posy"/>
		<param name="width"/>
		<param name="height" default="1-row"/>
		<param name="font" default="itemTitle"/>
		<param name="label" default=""/>
		<param name="up"/>
		<param name="down"/>
		<param name="left"/>
		<param name="right"/>
		<definition>
			<control type="button" id="$PARAM[id]">
				<description>$PARAM[description]</description>
				<visible>String.IsEmpty(Window.Property(Visible.$PARAM[id]))|String.IsEqual(Window.Property(Visible.$PARAM[id]),true)</visible>
				<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
				<posx>$PARAM[posx]</posx>
				<posy>$PARAM[posy]</posy>
				<width>$PARAM[width]</width>
				<height>$PARAM[height]</height>
				<font>$PARAM[font]</font>
				<textoffsetx>12</textoffsetx>
				<textoffsety>0</textoffsety>
				<align>center</align>
				<aligny>center</aligny>
				<textcolor>selected</textcolor>
				<focusedcolor>selected</focusedcolor>
				<shadowcolor>-</shadowcolor>
				<texturenofocus colordiffuse="77FFFFFF">masks/selected.png</texturenofocus>
				<texturefocus colordiffuse="77FFFFFF">controls/square-fo.png</texturefocus>
				<pulseonselect>true</pulseonselect>
				<include content="LabelParam" condition="!String.IsEmpty(Window.Property(Label.$PARAM[id]))">
					<param name="label" value="$INFO[Window.Property(Label.$PARAM[id])]"/>
				</include>
				<include content="LabelParam" condition="String.IsEmpty(Window.Property(Label.$PARAM[id]))">
					<param name="label" value="$PARAM[label]"/>
				</include>
				<onup>$PARAM[up]</onup>
				<ondown>$PARAM[down]</ondown>
				<onleft>$PARAM[left]</onleft>
				<onright>$PARAM[right]</onright>
			</control>
		</definition>
	</include>


	<!--
		PropertyRadiobutton control - Provides capability to collect Bool data input using a Radiobutton control, but
		stylised to look like a Checkbox control. The Value.[id] property can be True or False. In case if is empty
		the control will show unchecked (similar with False value)
		Input parameters:
			id		- Specifies the control ID of the edit box.
			posx	- Specifies where the left edge of the control should be drawn
			posy	- Specifies where the top edge of the control should be drawn
			width	- Specifies the width that should be used to draw the button control
			label	- Specifies the text which should be drawn as control label
			up		- Specifies the <id> of the control that should be moved to when the user moves up off this control
			down	- Specifies the <id> of the control that should be moved to when the user moves down off this control
			left	- Specifies the <id> of the control that should be moved to when the user moves left off this control
			right	- Specifies the <id> of the control that should be moved to when the user moves right off this control
		Input properties
			Visible.[id] - Makes the control to be visible or hidden. The possible values are True or Empty and False
			Enable.[id]  - Activates and de-activates the control. The possible values are True or Empty and False
			Label.[id]   - describes the control label. This label can be set in Pre-Init phase, before to start window controls loading
			Value.[id]   - describes the default value of the edit control (it should be numeric format)
			Action.[id]	 - Indicates the action that might be executed in case it is specified after the new value is provided
			Callback.[id]- Specifies if the current control wil trigger Click action immediately after the input value is provided
	-->
	<include name="PropertyRadiobutton">
		<param name="description"/>
		<param name="id"/>
		<param name="posx"/>
		<param name="posy"/>
		<param name="width"/>
		<param name="label" default=""/>
		<param name="up"/>
		<param name="down"/>
		<param name="left"/>
		<param name="right"/>
		<definition>
			<control type="group">
				<description>$PARAM[description]</description>
				<visible>String.IsEmpty(Window.Property(Visible.$PARAM[id]))|String.IsEqual(Window.Property(Visible.$PARAM[id]),true)</visible>
				<posx>$PARAM[posx]</posx>
				<posy>$PARAM[posy]</posy>
				<control type="radiobutton" id="$PARAM[id]0">
					<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
					<posx>0</posx>
					<posy>0</posy>
					<width>$PARAM[width]</width>
					<textcolor>disabled</textcolor>
					<focusedcolor>selected</focusedcolor>
					<texturefocus colordiffuse="77FFFFFF">masks/selected.png</texturefocus>
					<pulseonselect>true</pulseonselect>
					<textoffsetx>5</textoffsetx>
					<include content="LabelParam" condition="!String.IsEmpty(Window.Property(Label.$PARAM[id]))">
						<param name="label" value="$INFO[Window.Property(Label.$PARAM[id])]"/>
					</include>
					<include content="LabelParam" condition="String.IsEmpty(Window.Property(Label.$PARAM[id]))">
						<param name="label" value="$PARAM[label]"/>
					</include>
					<onup>$PARAM[up]</onup>
					<ondown>$PARAM[down]</ondown>
					<onleft>$PARAM[left]</onleft>
					<onright>$PARAM[right]</onright>
					<onclick condition="String.IsEqual(Window.Property(Value.$PARAM[id]),True)|String.IsEqual(Window.Property(Value.$PARAM[id]),true)|String.IsEqual(Window.Property(Value.$PARAM[id]),on)">SetProperty(Value.$PARAM[id],off)</onclick>
					<onclick condition="String.IsEqual(Window.Property(Value.$PARAM[id]),False)|String.IsEqual(Window.Property(Value.$PARAM[id]),false)|String.IsEqual(Window.Property(Value.$PARAM[id]),off)">SetProperty(Value.$PARAM[id],on)</onclick>
					<selected>String.IsEqual(Window.Property(Value.$PARAM[id]),True)|String.IsEqual(Window.Property(Value.$PARAM[id]),true)|String.IsEqual(Window.Property(Value.$PARAM[id]),on)</selected>
					<onclick condition="!String.IsEmpty(Window.Property(Action.$PARAM[id]))">Window.Property(Action.$PARAM[id])</onclick>
					<onclick condition="String.IsEqual(Window.Property(Callback.$PARAM[id]),on)">SendClick($PARAM[id])</onclick>
				</control>
				<control type="button" id="$PARAM[id]">
					<description>Proxy button</description>
					<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
					<onfocus>SetFocus($PARAM[id]0)</onfocus>
					<posx>0</posx>
					<posy>0</posy>
					<width>1</width>
				</control>
			</control>
		</definition>
	</include>


	<!--
		PropertyPopupHiddenValue control - Provides capability to collect data input over a String Dialog box and to store
		it but not display it. The control provides and indicative meaning and guessed action based on the aggregated
		label which actually provides a static/fix content.
		Input parameters:
			id		- Specifies the control ID of the edit box.
			posx	- Specifies where the left edge of the control should be drawn
			posy	- Specifies where the top edge of the control should be drawn
			width	- Specifies the width that should be used to draw the label
			font	- Specifies the font to use from the font.xml file
			label	- Specifies the text label which should be drawn as control label
			up		- Specifies the <id> of the control that should be moved to when the user moves up off this control
			down	- Specifies the <id> of the control that should be moved to when the user moves down off this control
			left	- Specifies the <id> of the control that should be moved to when the user moves left off this control
			right	- Specifies the <id> of the control that should be moved to when the user moves right off this control
			title	- Shows a custom label into the KeyboardDialog to set a new value
			icon	- Graphical icon or simple text (byt limited to max 2-3 chars) to be displayed on the lookup button
			dialog  - Indicates the type of dialog that will take the input data; could be: string, number, date, time. ipaddr, select, none
		Input properties
			Visible.[id] - Makes the control to be visible or hidden. The possible values are True or Empty and False
			Enable.[id]  - Activates and de-activates the control. The possible values are True or Empty and False
			Label.[id]   - describes the control label that can overwrite label parameter
			Value.[id]   - describes the default value of the edit control (it should be numeric format)
			Action.[id]	 - Indicates the action that might be executed in case it is specified after the new value is provided
			Callback.[id]- Specifies if the current control wil trigger Click action immediately after the input value is provided
	-->
	<include name="PropertyPopupHiddenValue">
		<param name="description"/>
		<param name="id"/>
		<param name="posx"/>
		<param name="posy"/>
		<param name="width"/>
		<param name="label" default=""/>
		<param name="icon" default=""/>
		<param name="up"/>
		<param name="down"/>
		<param name="left"/>
		<param name="right"/>
		<param name="title"/>
		<param name="dialog" default="string"/>
		<definition>
			<control type="group">
				<description>$PARAM[description]</description>
				<visible>String.IsEmpty(Window.Property(Visible.$PARAM[id]))|String.IsEqual(Window.Property(Visible.$PARAM[id]),true)</visible>
				<posx>$PARAM[posx]</posx>
				<posy>$PARAM[posy]</posy>
				<control type="label">
					<enable>Control.HasFocus($PARAM[id])|Control.HasFocus($PARAM[id]0)</enable>
					<posx>0</posx>
					<posy>0</posy>
					<width>$PARAM[width]</width>
					<font>itemTitle</font>
					<textcolor>selected</textcolor>
					<textoffsetx>5</textoffsetx>
					<shadowcolor>-</shadowcolor>
					<label fallback="$PARAM[label]">$INFO[Window.Property(Label.$PARAM[id])]</label>
				</control>
				<control type="group">
					<posx>$PARAM[width]</posx>
					<control type="image">
						<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
						<posx>-67</posx>
						<posy>0</posy>
						<width>57</width>
						<height>1-row</height>
						<texture border="3" flipy="true" flipx="false">masks/offblack.png</texture>
						<bordertexture border="3" colordiffuse="77FFFFFF">controls/square-fo.png</bordertexture>
						<bordersize>3</bordersize>
					</control>
					<control type="button" id="$PARAM[id]0">
						<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
						<posx>-67</posx>
						<posy>0</posy>
						<width>57</width>
						<font>symbolMedium</font>
						<textoffsetx>12</textoffsetx>
						<textoffsety>0</textoffsety>
						<align>center</align>
						<aligny>center</aligny>
						<textcolor>black</textcolor>
						<focusedcolor>white</focusedcolor>
						<shadowcolor>-</shadowcolor>
						<texturenofocus colordiffuse="77FFFFFF">masks/selected.png</texturenofocus>
						<texturefocus colordiffuse="77FFFFFF">controls/square-fo.png</texturefocus>
						<pulseonselect>true</pulseonselect>
						<label>$PARAM[icon]</label>
						<onup>$PARAM[up]</onup>
						<ondown>$PARAM[down]</ondown>
						<onleft>$PARAM[left]</onleft>
						<onright>$PARAM[right]</onright>
						<onclick condition="!String.IsEmpty(Window.Property(Action.$PARAM[id]))">Window.Property(Action.$PARAM[id])</onclick>
						<onclick condition="String.IsEqual(Window.Property(Callback.$PARAM[id]),on">RunScript(service.clue,graphic.setproperty,dialog=$PARAM[dialog]&amp;title=$PARAM[title]&amp;data=$INFO[Window.Property(Data.$PARAM[id])]&amp;default=$INFO[Window.Property(Value.$PARAM[id])]&amp;property=Value.$PARAM[id]&amp;callback=SendClick($PARAM[id]))</onclick>
						<onclick condition="!String.IsEqual(Window.Property(Callback.$PARAM[id]),on">RunScript(service.clue,graphic.setproperty,dialog=$PARAM[dialog]&amp;title=$PARAM[title]&amp;data=$INFO[Window.Property(Data.$PARAM[id])]&amp;default=$INFO[Window.Property(Value.$PARAM[id])]&amp;property=Value.$PARAM[id])</onclick>
					</control>
					<control type="button" id="$PARAM[id]">
						<description>Proxy button</description>
						<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
						<onfocus>SetFocus($PARAM[id]0)</onfocus>
						<posx>0</posx>
						<posy>0</posy>
						<width>1</width>
					</control>
				</control>
			</control>
		</definition>
	</include>


	<!--
		PropertyPopupDisplayValue control - Provides capability to collect data input over String Dialog box and to store
		it and to display it into a the associated label.
		Input parameters:
			id		- Specifies the control ID of the edit box.
			posx	- Specifies where the left edge of the control should be drawn
			posy	- Specifies where the top edge of the control should be drawn
			width	- Specifies the width that should be used to draw the label
			font	- Specifies the font to use from the font.xml file
			value	- Specifies the default text value which should be drawn as the control label/initial value
			up		- Specifies the <id> of the control that should be moved to when the user moves up off this control
			down	- Specifies the <id> of the control that should be moved to when the user moves down off this control
			left	- Specifies the <id> of the control that should be moved to when the user moves left off this control
			right	- Specifies the <id> of the control that should be moved to when the user moves right off this control
			title	- Shows a custom label into the KeyboardDialog to set a new value
			icon	- Graphical icon or simple text (byt limited to max 2-3 chars) to be displayed on the lookup button
			dialog  - Indicates the type of dialog that will take the input data; could be: string, number, date, time. ipaddr, select
		Input properties
			Visible.[id] - Makes the control to be visible or hidden. The possible values are True or Empty and False
			Enable.[id]  - Activates and de-activates the control. The possible values are True or Empty and False
			Value.[id]   - describes the default value of the edit control (it should be numeric format)
			Action.[id]  - Indicates the action that might be executed in case it is specified after the new value is provided
			Callback.[id]- Specifies if the current control wil trigger Click action immediately after the input value is provided
	-->
	<include name="PropertyPopupDisplayValue">
		<param name="description"/>
		<param name="id"/>
		<param name="posx"/>
		<param name="posy"/>
		<param name="width"/>
		<param name="value"/>
		<param name="icon" default=""/>
		<param name="up"/>
		<param name="down"/>
		<param name="left"/>
		<param name="right"/>
		<param name="title"/>
		<param name="dialog" default="string"/>
		<definition>
			<control type="group">
				<description>$PARAM[description]</description>
				<visible>String.IsEmpty(Window.Property(Visible.$PARAM[id]))|String.IsEqual(Window.Property(Visible.$PARAM[id]),true)</visible>
				<posx>$PARAM[posx]</posx>
				<posy>$PARAM[posy]</posy>
				<control type="label">
					<enable>Control.HasFocus($PARAM[id])|Control.HasFocus($PARAM[id]0)</enable>
					<posx>0</posx>
					<posy>0</posy>
					<width>$PARAM[width]</width>
					<font>itemTitle</font>
					<textcolor>selected</textcolor>
					<textoffsetx>5</textoffsetx>
					<shadowcolor>-</shadowcolor>
					<label fallback="$PARAM[value]">$INFO[Window.Property(Value.$PARAM[id])]</label>
				</control>
				<control type="group">
					<posx>$PARAM[width]</posx>
					<control type="image">
						<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
						<posx>-67</posx>
						<posy>0</posy>
						<width>57</width>
						<height>1-row</height>
						<texture border="3" flipy="true" flipx="false">masks/offblack.png</texture>
						<bordertexture border="3" colordiffuse="77FFFFFF">controls/square-fo.png</bordertexture>
						<bordersize>3</bordersize>
					</control>
					<control type="button" id="$PARAM[id]0">
						<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
						<posx>-67</posx>
						<posy>0</posy>
						<width>57</width>
						<font>symbolMedium</font>
						<textoffsetx>12</textoffsetx>
						<textoffsety>0</textoffsety>
						<align>center</align>
						<aligny>center</aligny>
						<textcolor>black</textcolor>
						<focusedcolor>white</focusedcolor>
						<shadowcolor>-</shadowcolor>
						<texturenofocus colordiffuse="77FFFFFF">masks/selected.png</texturenofocus>
						<texturefocus colordiffuse="77FFFFFF">controls/square-fo.png</texturefocus>
						<pulseonselect>true</pulseonselect>
						<label>$PARAM[icon]</label>
						<onup>$PARAM[up]</onup>
						<ondown>$PARAM[down]</ondown>
						<onleft>$PARAM[left]</onleft>
						<onright>$PARAM[right]</onright>
						<onclick condition="!String.IsEmpty(Window.Property(Action.$PARAM[id]))">Window.Property(Action.$PARAM[id])</onclick>
						<onclick condition="String.IsEqual(Window.Property(Callback.$PARAM[id]),on">RunScript(service.clue,graphic.setproperty,dialog=$PARAM[dialog]&amp;title=$PARAM[title]&amp;data=$INFO[Window.Property(Data.$PARAM[id])]&amp;default=$INFO[Window.Property(Value.$PARAM[id])]&amp;property=Value.$PARAM[id]&amp;callback=SendClick($PARAM[id]))</onclick>
						<onclick condition="!String.IsEqual(Window.Property(Callback.$PARAM[id]),on">RunScript(service.clue,graphic.setproperty,dialog=$PARAM[dialog]&amp;title=$PARAM[title]&amp;data=$INFO[Window.Property(Data.$PARAM[id])]&amp;default=$INFO[Window.Property(Value.$PARAM[id])]&amp;property=Value.$PARAM[id])</onclick>
					</control>
					<control type="button" id="$PARAM[id]">
						<description>Proxy button</description>
						<enable>String.IsEmpty(Window.Property(Enable.$PARAM[id]))|String.IsEqual(Window.Property(Enable.$PARAM[id]),true)</enable>
						<onfocus>SetFocus($PARAM[id]0)</onfocus>
						<posx>0</posx>
						<posy>0</posy>
						<width>1</width>
					</control>
				</control>
			</control>
		</definition>
	</include>

</includes>